(* type ('a, 'b) t = ('a * 'b) list *)
type ('a, 'b) t = 'a -> 'b

(* ’¶õ’¤Î’´Ä’¶­ *)
(* let empty = [] *)
let empty = fun x -> raise Not_found

(* ’»È’¤¤’Êý’¡§get env var *)
(* ’´Ä’¶­ env ’¤Î’Ãæ’¤Ç’ÊÑ’¿ô var ’¤Î’ÃÍ’¤ò’ÊÖ’¤¹ *)
(* ’ÊÑ’¿ô var ’¤¬’¸«’¤Ä’¤«’¤é’¤Ê’¤«’¤Ã’¤¿’¤é’Îã’³° Not_found ’¤ò’µ¯’¤³’¤¹ *)
let get env var = env var
  
(* ’»È’¤¤’Êý’¡§extend env var value *)
(* ’´Ä’¶­ env ’¤Ë’ÊÑ’¿ô var ’¤Î’ÃÍ’¤ò value ’¤Ë’ÅÐ’Ï¿’¤·’¤¿’¿·’¤¿’¤Ê’´Ä’¶­’¤ò’ÊÖ’¤¹ *)
(* let extend env var value = *)
(*   if List.mem_assoc var env then (var, value) :: (List.remove_assoc var env) *)
(*   else (var, value) :: env *)
let extend env var value = 
  fun x -> if x = var then value else env x
