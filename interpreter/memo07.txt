ε[x]ρ = ρ(x)
ε[n]ρ = n
ε[λx.e]ρ = <x,e,ρ> // closure を表す
ε[e1 e2]ρ = let v1 =ε[e1]ρ in
     	    let v2 =ε[e2]ρ in
	    case v1 of
	      <x,e,ρ'> ->ε[e]ρ' [x->v2]
      	      <f,x,e,ρ'> -> ...
ε[let x = e in e']ρ = let v = ε[e]ρ in
      	       	      ε[e']ρ [x->v] 
ε[let rec f = fun x -> e in e']ρ = let v = <f,x,e,ρ> in
      	        	       	   ε[e']ρ [f->v] 

>>>
let rec fac = fun n ->
  if n = 0 then 1
      	   else n * fac (n-1)
in fac 3
<<<

closure ができる
このときのfvは、クローズすることで値を保持する
自由変数は =, * 
初期環境に入っている
一番大事なのは L3 の fac
fac は、ここまでの定義にない
このまま実行すると fac なんて知らないよと言われてしまう

let rec は特殊に扱う
recursive なものだと言ってあげる
再帰的なクロージャを用意してあげて、函数の名前も教えてあげる
<f,x,e,e'> -> ε [ρ] ρ' [x->v2, f-><f,x,e,e'>]
再帰呼び出しのときに自分自身を環境に入れてあげられる。
このようにして、循環函数を使うことなく対処できる

CPS なら、
v1 を受け取って来たら ε[e1]ρ を返す〜、という風にすればいい

ε[let rec f = fun x -> e in e']ρ = let v = <f,x,e,ρ> in
      	        	       	   ε[e']ρ [f->v] 
だと、中身まで確認してちゃんと再帰してるか考えてあげなくちゃならないから、
ε[let rec f x = e in e']ρ とするのがよいね。

parser で工夫していないと、fib ではうまく構文解析してくれない。
なぜなら、
 let rec fib x = 
    if x = 0 then 0 else if x = 1 then 1 else fib(x-1)+fib(x-2);;
の else 以下で、
fib ((x-1) + fib(x-2))
という風にとられてしまっている。
(fib (x-1)) + fib (x-2)
という風にすれば、一応通るけど、計算モデル論の第 6 章に載っている
parser の書き方をすれば、いいかんじに構文解析してくれる。

