http://pllab.is.ocha.ac.jp/zemi_8.html

>>>
(control (fun k -> ...)) * 3 + 1
<<<

5 -> 5   // raise 5 みたいなかんじ
k 5 -> 16
7 + k 5 -> 16  // その後の計算は捨てられる
k にいきなり飛んでいって、残りの計算が行われる

CPS で interpreter 書いてると簡単に書ける
継続を表す値が環境に入る(k は環境です)
application するときに、函数呼び出しをしているときの継続は捨てて、代わりに k を継続にする


choose: リストの先頭を選んで、その後の継続を取り、終わったら次々にリストの中身を渡す

let a = choose [1;2;3;4;5] in
let b = choose [1;2;3;4;5] in
let c = choose [1;2;3;4;5] in
if a*a + b*b = c*c then print_endline(a,b,c);

バックトラックせず、非決定的に書くことが出来る
(back track するときは、うまくいかなかったときの話を書かなくちゃならない)
金子さんの作ったライブラリのモジュールは、深さ/幅優先探索ができる

prompt は、ocaml でいう #
# 1+2;;
# 1+control;;
control は、prompt まで取って来ている
